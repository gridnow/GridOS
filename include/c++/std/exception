// Exception Handling support header for -*- C++ -*-

/** @file exception
 *  This header defines several types and functions relating to the
 *  handling of exceptions in a C++ program.
 */

#ifndef __EXCEPTION__
#define __EXCEPTION__

#pragma GCC visibility push(default)

extern "C++" {

namespace std 
{
  	/**
   	*  @brief Base class for all library exceptions.
   	*
   	*  This is the base class for all exceptions thrown by the standard
   	*  library, and by certain language expressions.  You are free to derive
   	*  your own %exception classes, or use a different hierarchy, or to
   	*  throw non-class data (e.g., fundamental types).
   	*/
  	class exception 
  	{
  		public:
    		exception() throw() { }
    		virtual ~exception() throw();
    		/** Returns a C-style character string describing the general cause
     		*  of the current error.  */
    		virtual const char* what() const throw();
  	};

  	/** If an %exception is thrown which is not listed in a function's
   	*  %exception specification, one of these may be thrown.  */
  	class bad_exception : public exception 
  	{
  		public:
    	bad_exception() throw() { }
    	// This declaration is not useless:
    	// http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
    	virtual ~bad_exception() throw();
  	};

  	/// If you write a replacement %terminate handler, it must be of this type.
  	typedef void (*terminate_handler) ();
  	/// If you write a replacement %unexpected handler, it must be of this type.
  	typedef void (*unexpected_handler) ();

  	/// Takes a new handler function as an argument, returns the old function.
  	terminate_handler set_terminate(terminate_handler) throw();
  	/** The runtime will call this function if %exception handling must be
   	*  abandoned for any reason.  It can also be called by the user.  */
  	void terminate() __attribute__ ((__noreturn__));

  	/// Takes a new handler function as an argument, returns the old function.
  	unexpected_handler set_unexpected(unexpected_handler) throw();
  	/** The runtime will call this function if an %exception is thrown which
   	*  violates the function's %exception specification.  */
  		void unexpected() __attribute__ ((__noreturn__));

  	/** [18.6.4]/1:  "Returns true after completing evaluation of a
   	*  throw-expression until either completing initialization of the
   	*  exception-declaration in the matching handler or entering @c unexpected()
   	*  due to the throw; or after entering @c terminate() for any reason
   	*  other than an explicit call to @c terminate().  [Note: This includes
   	*  stack unwinding [15.2].  end note]"
   	*
   	*  2:  "When @c uncaught_exception() is true, throwing an %exception can
   	*  result in a call of @c terminate() (15.5.1)."
   	*/
  	bool uncaught_exception() throw();
} // namespace std

namespace __gnu_cxx
{
  	/** A replacement for the standard terminate_handler which prints more
      information about the terminating exception (if any) on stderr.  Call
      @code
        std::set_terminate (__gnu_cxx::__verbose_terminate_handler)
      @endcode
      to use.  For more info, see
      http://gcc.gnu.org/onlinedocs/libstdc++/19_diagnostics/howto.html#4

      In 3.4 and later, this is on by default.
  	*/
  	void __verbose_terminate_handler ();
} // namespace __gnu_cxx
  
} // extern "C++"

#pragma GCC visibility pop

#endif
